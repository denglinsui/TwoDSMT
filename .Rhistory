res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = ,
Ta.star = Inf,sig_ratio=sig_ratio,
EmpMethod = "DeCor",
is.fixRectShape = T,
const = 0)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 500 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,10,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Sparse",Cov_type = "Weak",
magnitude=2,point=point)
mu <- I_S$mu * 2
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run BH algorithm
result.BH <- qvalue(p.value,pi0 = 1)
selected.BH <- which(result.BH$qvalues<=q)
# Run 1D algorithm (1D(BH))
res.1D <- OneD_Detect(Tm, q,  pis = NULL,const = const, tau.tm = 1)
selected.1D <- res.1D$selected
Tm.star <- res.1D$tm.min
max.rej <- res.1D$max.rej
# Run 2D algorith with 2 neighbors (2D(BH))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
sig_ratio <- Neigh_Detect_res$sig_ratio
res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = ,
Ta.star = Inf,sig_ratio=sig_ratio,
EmpMethod = "DeCor",
#is.fixRectShape = T,
const = 0)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 500 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,10,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Sparse",Cov_type = "Weak",
magnitude=2,point=point)
mu <- I_S$mu * 2
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run BH algorithm
result.BH <- qvalue(p.value,pi0 = 1)
selected.BH <- which(result.BH$qvalues<=q)
# Run 1D algorithm (1D(BH))
res.1D <- OneD_Detect(Tm, q,  pis = NULL,const = const, tau.tm = 1)
selected.1D <- res.1D$selected
Tm.star <- res.1D$tm.min
max.rej <- res.1D$max.rej
# Run 2D algorith with 2 neighbors (2D(BH))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
sig_ratio <- Neigh_Detect_res$sig_ratio
res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = ,
Ta.star = Inf,sig_ratio=sig_ratio,
EmpMethod = "DeCor",
is.fixRectShape = T,
const = 0)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(TwoDSMT)
?Spatial_Detect_exact_grp_BH_down
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run BH algorithm
result.BH <- qvalue(p.value,pi0 = 1)
selected.BH <- which(result.BH$qvalues<=q)
# Run 1D algorithm (1D(BH))
res.1D <- OneD_Detect(Tm, q,  pis = NULL,const = const, tau.tm = 1)
selected.1D <- res.1D$selected
Tm.star <- res.1D$tm.min
max.rej <- res.1D$max.rej
# Run 2D algorith with 2 neighbors (2D(BH))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = Tm.star,
Ta.star = Inf,
const = const)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run BH algorithm
result.BH <- qvalue(p.value,pi0 = 1)
selected.BH <- which(result.BH$qvalues<=q)
# Run 1D algorithm (1D(BH))
res.1D <- OneD_Detect(Tm, q,  pis = NULL,const = const, tau.tm = 1)
selected.1D <- res.1D$selected
Tm.star <- res.1D$tm.min
max.rej <- res.1D$max.rej
# Run 2D algorith with 2 neighbors (2D(BH))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = Tm.star,
Ta.star = Inf,EmpMethod = "DeCor",
const = const)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(TwoDSMT)
?Spatial_Detect_exact_BH_down_reTm_reTa
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run SABHA algorithm
tau = 0.5;eps = 0.1; TV_bd = 2
alpha_ADMM = 10^2; beta = 10^3; eta = 5; max_iters = 5000; converge_thr = 1e-4 # parameters for ADMM
ADMM_params = c(alpha_ADMM,beta,eta,max_iters,converge_thr)
qhat = Solve_q_TV_1dim(p.value, tau, eps, TV_bd, ADMM_params)
SABHA_method = function(pvals, qhat, alpha, tau){
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
sab.selected <- SABHA_method(p.value, qhat, q, tau)
# Run 1D algorithm (SABHA)
ws.sabha.fun <- function(x){1/x}
res.1D.sabha <- OneD_Detect_w(Tm, q, pis = qhat,
ws.fun = ws.sabha.fun,
const = const,
tau.tm = 1)
tm.star.sabha <- res.1D.sabha$tm.min
max.rej.sabha <- res.1D.sabha$max.rej
selected.1D.sabha <- res.1D.sabha$selected
# Run 2D algorith with 2 neighbors (2D(SA))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D.sabha <- Spatial_Detect_exact_BH_down_reTm_reTa(Tm, Ta, Va,
VmVa.cov, ind,
q,
max.rej = max.rej.sabha,
pis = qhat,
pws.tm.star = tm.star.sabha,
pws.ta.star = 0,
const = const,
ws.fun = ws.sabha.fun,
n.group.max = 5)
selected.2D.sabha <- res.2D.sabha$selected
tm <- res.2D.sabha$tm0
ta <- res.2D.sabha$ta0
# fdp and power
fdp(sab.selected,mu);fdp(selected.1D.sabha,mu);fdp(selected.2D.sabha,mu)
Pow(sab.selected,mu);Pow(selected.1D.sabha,mu);Pow(selected.2D.sabha,mu)
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run SABHA algorithm
tau = 0.5;eps = 0.1; TV_bd = 2
alpha_ADMM = 10^2; beta = 10^3; eta = 5; max_iters = 5000; converge_thr = 1e-4 # parameters for ADMM
ADMM_params = c(alpha_ADMM,beta,eta,max_iters,converge_thr)
qhat = Solve_q_TV_1dim(p.value, tau, eps, TV_bd, ADMM_params)
SABHA_method = function(pvals, qhat, alpha, tau){
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
sab.selected <- SABHA_method(p.value, qhat, q, tau)
# Run 1D algorithm (SABHA)
ws.sabha.fun <- function(x){1/x}
res.1D.sabha <- OneD_Detect_w(Tm, q, pis = qhat,
ws.fun = ws.sabha.fun,
const = const,
tau.tm = 1)
tm.star.sabha <- res.1D.sabha$tm.min
max.rej.sabha <- res.1D.sabha$max.rej
selected.1D.sabha <- res.1D.sabha$selected
# Run 2D algorith with 2 neighbors (2D(SA))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D.sabha <- Spatial_Detect_exact_BH_down_reTm_reTa(Tm, Ta, Va,
VmVa.cov, ind,
q,
max.rej = max.rej.sabha,
pis = qhat, EmpMethod = "DeCor",
pws.tm.star = tm.star.sabha,
pws.ta.star = 0,
const = const,
ws.fun = ws.sabha.fun,
n.group.max = 5)
selected.2D.sabha <- res.2D.sabha$selected
tm <- res.2D.sabha$tm0
ta <- res.2D.sabha$ta0
# fdp and power
fdp(sab.selected,mu);fdp(selected.1D.sabha,mu);fdp(selected.2D.sabha,mu)
Pow(sab.selected,mu);Pow(selected.1D.sabha,mu);Pow(selected.2D.sabha,mu)
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run SABHA algorithm
tau = 0.5;eps = 0.1; TV_bd = 2
alpha_ADMM = 10^2; beta = 10^3; eta = 5; max_iters = 5000; converge_thr = 1e-4 # parameters for ADMM
ADMM_params = c(alpha_ADMM,beta,eta,max_iters,converge_thr)
qhat = Solve_q_TV_1dim(p.value, tau, eps, TV_bd, ADMM_params)
SABHA_method = function(pvals, qhat, alpha, tau){
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
sab.selected <- SABHA_method(p.value, qhat, q, tau)
# Run 1D algorithm (SABHA)
ws.sabha.fun <- function(x){1/x}
res.1D.sabha <- OneD_Detect_w(Tm, q, pis = qhat,
ws.fun = ws.sabha.fun,
const = const,
tau.tm = 1)
tm.star.sabha <- res.1D.sabha$tm.min
max.rej.sabha <- res.1D.sabha$max.rej
selected.1D.sabha <- res.1D.sabha$selected
# Run 2D algorith with 2 neighbors (2D(SA))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D.sabha <- Spatial_Detect_exact_BH_down_reTm_reTa(Tm, Ta-10, Va,
VmVa.cov, ind,
q,
max.rej = max.rej.sabha,
pis = qhat, EmpMethod = "DeCor",
pws.tm.star = tm.star.sabha,
pws.ta.star = 0,
const = const,
ws.fun = ws.sabha.fun,
n.group.max = 5)
selected.2D.sabha <- res.2D.sabha$selected
tm <- res.2D.sabha$tm0
ta <- res.2D.sabha$ta0
# fdp and power
fdp(sab.selected,mu);fdp(selected.1D.sabha,mu);fdp(selected.2D.sabha,mu)
Pow(sab.selected,mu);Pow(selected.1D.sabha,mu);Pow(selected.2D.sabha,mu)
library(TwoDSMT)
?Neigh_Detect
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run BH algorithm
result.BH <- qvalue(p.value,pi0 = 1)
selected.BH <- which(result.BH$qvalues<=q)
# Run 1D algorithm (1D(BH))
res.1D <- OneD_Detect(Tm, q,  pis = NULL,const = const, tau.tm = 1)
selected.1D <- res.1D$selected
Tm.star <- res.1D$tm.min
max.rej <- res.1D$max.rej
# Run 2D algorith with 2 neighbors (2D(BH))
hh <- 2 # neighbor number
hh.seq <- rep(hh,m)
Neigh_Detect_res <- Neigh_Detect(hh = hh.seq, X = X,
Dist = Dist.p, Sigma.eps = Sigma.eps.p,
detect.m = "top.k")
Ta <- Neigh_Detect_res$Ta
Va <- Neigh_Detect_res$Va
VmVa.cov <- Neigh_Detect_res$VmVa.cov
ind <- Neigh_Detect_res$ind
mua <- Neigh_Detect_res$mua
res.2D <- Spatial_Detect_exact_grp_BH_down(Tm, Ta, Va, VmVa.cov, ind,
q, max.rej,
Tm.star = Tm.star,
Ta.star = Inf,
const = const)
selected.2D <- res.2D$selected
tm <- res.2D$tm0
ta <- res.2D$ta0
# fdp and power
fdp(selected.BH,mu);fdp(selected.1D,mu);fdp(selected.2D,mu)
Pow(selected.BH,mu);Pow(selected.1D,mu);Pow(selected.2D,mu)
library(TwoDSMT)
library(TwoDSMT)
devtools::document()
library(TwoDSMT)
?TwoDSMT
?TwoDwSMT
?Neigh_Detect
?L.cal
?Spatial_Detect_exact_BH_down_reTm_reTa
devtools::document()
devtools::document()
library(TwoDSMT)
