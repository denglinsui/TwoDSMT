% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TwoDimDetection.R
\name{TwoDwSMT}
\alias{TwoDwSMT}
\title{Two Dimensional weighted spatial multiple testing procedure (2d-SMT) Procedure
Searching for the optimal threshold for the two dimensional spatial multiple testing procedure (2d-SMT) procedure based on the primary and auxiliary statistics.}
\usage{
TwoDwSMT(
  X,
  hh.seq,
  pis = NULL,
  ws.fun = NULL,
  ws = NULL,
  Dist.p,
  Sigma.eps.p,
  detect.m = "top.k",
  q = 0.1,
  cutoff = NULL,
  const = 0,
  seed = 0,
  dig = 7,
  tau.tm = 1,
  tau.ta = 1,
  n.group.max = 5
)
}
\arguments{
\item{X}{a n*m matrix representing the observations, m is the number of locations, n is the number of observations at each location.}

\item{hh.seq}{an integer vector indicating the number of neighbors for each location.}

\item{pis}{a numerical vector representing the probability of being null.}

\item{ws.fun}{a function for weighting, depending on the null proportion.}

\item{ws}{a numerical vector indicating the non-null weights.}

\item{Dist.p}{a m*m matrix representing the distance between points.s}

\item{Sigma.eps.p}{a m*m matrix representing the covariance matrix for noises.}

\item{detect.m}{a character representing the detecting method, currently only the k-nearest neighbor, "top.k", is available.}

\item{q}{a numerical value representing the target fdr level.}

\item{cutoff}{a matrix with two columns representing the candidate cutoff set and it should be noted that the cutoffs are ordered for searching convenience;}

\item{const}{a numerical value ensuring the selection stability, usually be target fdr level.}

\item{seed}{a numerical value indicating the simulation seed (can be omit).}

\item{dig}{an integer representing the digit precision.}

\item{tau.tm}{a numerical value representing the censor level for p-values.}

\item{tau.ta}{a numerical value representing the censor level for p-values.}

\item{n.group.max}{an integer determining how many groups do we use to accelerate.}
}
\value{
list;
selected is an integer vector consisting of selected locations;
Tm is a numerical vector consisting of primary statistics;
Ta is a numerical vector consisting of auxiliary statistics;
tm0 a numerical value representing the threshold for the primary statistics;
ta0 a numerical value representing the threshold for the auxiliary statistics;
final.fdr a numerical value representing the final estimated false discovery rate.
}
\description{
Two Dimensional weighted spatial multiple testing procedure (2d-SMT) Procedure
Searching for the optimal threshold for the two dimensional spatial multiple testing procedure (2d-SMT) procedure based on the primary and auxiliary statistics.
}
\examples{
library(dplyr)
library(fda)
library(qvalue)
# Basic Setting
set.seed(1234)
dig <- 7 # digits precision
n <- 1 # observation number at each point
m <- 120 # point size
q <- 0.1 # fdr level
const <- q # const for stablizing
# Generate data
point <- matrix(seq(0,1,length.out=m), ncol=1)
Dist.p <- as.matrix(dist(point))
I_S <- Init_Setting_1D(mu_type = "Dense",Cov_type = "Weak",
                       magnitude=2,mu_gen_machine="mvnorm",point=point)
mu <- I_S$mu
Sigma.eps.p <- I_S$Sigma.eps.p
X <- MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma.eps.p)
X <- matrix(X, nrow = n)
sgm <- sqrt(diag(Sigma.eps.p))
Tm <- apply(X,2,function(x){sum(x)/sqrt(n)})/sgm # Generate primary statistics
Tm <- round(Tm,dig)
p.value <- 1 - pnorm(Tm) # Generate one-side p.value
# Run SABHA algorithm
tau = 0.5;eps = 0.1; TV_bd = 2
alpha_ADMM = 10^2; beta = 10^3; eta = 5; max_iters = 5000; converge_thr = 1e-4 # parameters for ADMM
ADMM_params = c(alpha_ADMM,beta,eta,max_iters,converge_thr)
qhat = Solve_q_TV_1dim(p.value, tau, eps, TV_bd, ADMM_params)
SABHA_method = function(pvals, qhat, alpha, tau){
pvals[pvals>tau] = Inf
khat=max(c(0,which(sort(qhat*pvals)<=alpha*(1:length(pvals))/length(pvals))))
which(qhat*pvals<=alpha*khat/length(pvals))
}
sab.selected <- SABHA_method(p.value, qhat, q, tau)


# Run 2D algorith with 2 neighbors (2D(SA))
ws.sabha.fun <- function(x){1/x}
hh <- 2
hh.seq <- rep(hh,m)
res.2D.sabha <- TwoDwSMT(X, hh.seq=hh.seq,pis=qhat,ws.fun = ws.sabha.fun,Dist.p=Dist.p,
                        Sigma.eps.p=Sigma.eps.p, q=q, const = const,n.group.max=5)
selected.2D.sabha <- res.2D.sabha$selected
tm <- res.2D.sabha$tm0
ta <- res.2D.sabha$ta0
# fdp and power
fdp(sab.selected,mu);fdp(selected.2D.sabha,mu)
Pow(sab.selected,mu);Pow(selected.2D.sabha,mu)
}
